<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.levent.pcd</groupId>
	<artifactId>ProductCatalogDemo</artifactId>
	<version>1.0-SNAPSHOT</version>
	<name>Product Catalog Demo</name>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
	</parent>
	<properties>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud-version>2.1.2.RELEASE</spring-cloud-version>
		<aws-s3-version>1.11.615</aws-s3-version>
		<aws-sdk-sts-version>1.11.616</aws-sdk-sts-version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>com.paypal.sdk</groupId>
			<artifactId>rest-api-sdk</artifactId>
			<version>1.13.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-ses -->
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk-ses</artifactId>
			<version>1.11.538</version>
		</dependency>
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
		</dependency>




		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>de.flapdoodle.embed</groupId>
			<artifactId>de.flapdoodle.embed.mongo</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.security.oauth/spring-security-oauth2 -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security.oauth.boot</groupId>
			<artifactId>spring-security-oauth2-autoconfigure</artifactId>
			<version>2.0.0.RELEASE</version>
		</dependency>


		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-annotations</artifactId>
			<version>3.5.6-Final</version>
		</dependency>
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-jasper -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.4.1.Final</version>
		</dependency>
		<dependency>
			<groupId>com.github.cloudyrock.mongock</groupId>
			<artifactId>mongock-core</artifactId>
			<version>3.0.2.BETA</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>


		<!-- Add to use with Spring -->
		<dependency>
			<groupId>com.github.cloudyrock.mongock</groupId>
			<artifactId>mongock-core</artifactId>
			<version>3.0.2.BETA</version>
		</dependency>
		<dependency>
			<groupId>com.github.cloudyrock.mongock</groupId>
			<artifactId>mongock-spring</artifactId>
			<version>3.0.2.BETA</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>



		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-aws-context</artifactId>
			<version>${spring-cloud-version}</version>
		</dependency>
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk-cloudfront</artifactId>
			<version>1.11.538</version>
		</dependency>
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk-sts</artifactId>
			<version>1.11.538</version>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.mail/javax.mail-api -->
		<!-- https://mvnrepository.com/artifact/javax.mail/mail -->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.5.0-b01</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>


	</dependencies>
	<profiles>
		<profile>
			<id>quality_control</id> 
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- SonarQube and Jacoco tests reports -->
				<surefire.version>2.22.2</surefire.version>
				<jacoco.version>0.8.3</jacoco.version>
				<!-- Sonar global configuration -->
				<sonar.language>java</sonar.language>
				<sonar.sourceEncoding>${project.reporting.outputEncoding}</sonar.sourceEncoding>
				<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
				<sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
				<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
				<!-- Dependencies checks (OWASP) reports -->
				<!-- sonar.dependencyCheck.reportPath>${project.build.directory}/dependency-check-report.xml</sonar.dependencyCheck.reportPath -->
				<!-- Tell sonar where to look for the UNIT coverage files. Property inherited 
					by submodules -->
				<sonar.junit.reportPaths>${project.build.directory}/surefire-reports</sonar.junit.reportPaths>
				<sonar.jacoco.reportPath>${project.build.directory}/jacoco.exec</sonar.jacoco.reportPath>
				<sonar.coverage.jacoco.xmlReportPaths>${project.build.directory}/site/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
				<!-- Integration tests -->
				<sonar.jacoco.itReportPath>${project.build.directory}/jacoco-it.exec</sonar.jacoco.itReportPath>
			</properties>

			<!-- To generate units and integrations test reports -->
			<build>
				<plugins>
					<!-- To run UNIT tests and generate execution reports. These reports 
						are required for SonarQube -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${surefire.version}</version>
						<configuration>
							<excludes>
								<exclude>**/*TestAPI</exclude>
								<exclude>**/*IntegrationTest</exclude>
							</excludes>
						</configuration>
					</plugin>

					<!-- To run INTEGRATION tests and generate execution reports. These 
						reports are required for SonarQube -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${surefire.version}</version>
						<configuration>
							<includes>
								<include>**/*TestAPI</include>
								<include>**/*IntegrationTest</include>
							</includes>
						</configuration>
						<executions>
							<execution>
								<id>default-integration-test</id>
								<goals>
									<goal>integration-test</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- JACOCO test coverage plugin. Use it to compile SUREFIRE (unit tests) 
						and FAILSAFE (integration tests) reports for SonarQube (i) attach that plugin 
						to Maven TEST phase Reports are generated in "${project.build.directory}/site/jacoco/*" 
						by default Good documentations: https://wiki.onap.org/display/DW/Implementing+Code+Coverage 
						https://www.devcon5.ch/en/blog/2015/05/29/multi-module-integration-test-coverage-sonar-jacoco/ 
						https://www.eclemma.org/jacoco/trunk/doc/maven.html -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco.version}</version>
						<configuration>
							<append>true</append>
							<!-- Use offline bytecode (with powermock changes) -->
							<excludes>
								<exclude>*</exclude>
							</excludes>
						</configuration>
						<executions>
							<!-- Support for PowerMock tests -->
							<!-- See https://www.igorkromin.net/index.php/2018/03/06/quick-look-at-jacoco-vs-cobertura-performance-and-coverage-results/ -->
							<execution>
								<id>jacoco-instrument</id>
								<goals>
									<goal>instrument</goal>
								</goals>
							</execution>
							<execution>
								<id>jacoco-restore-instrumented-classes</id>
								<goals>
									<goal>restore-instrumented-classes</goal>
								</goals>
							</execution>
							<!-- ## UNIT TESTS ## -->
							<!-- Configure JaCoCo runtime agent. It is passed as VM argument when 
								Maven SUREFIRE plugin is executed. -->
							<execution>
								<id>pre-unit-tests</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<!-- Create reports -->
							<execution>
								<id>report-unit-tests</id>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
							<!-- ## INTEGRATION TESTS ## -->
							<!-- Configure JaCoCo runtime agent. It is passed as VM argument when 
								Maven FAILSAFE plugin is executed. -->
							<execution>
								<id>pre-integration-tests</id>
								<goals>
									<goal>prepare-agent-integration</goal>
								</goals>
							</execution>
							<!-- Create reports -->
							<execution>
								<id>report-integration-tests</id>
								<goals>
									<goal>report-integration</goal>
								</goals>
							</execution>
							<!-- ## MERGE ALL TESTS reports ## -->
							<execution>
								<id>merge</id>
								<goals>
									<goal>merge</goal>
								</goals>
								<configuration>
									<!-- Only 1 destination file to aggregate ALL integration tests 
										reports -->
									<!-- the "session.executionRootDirectory" = parent folder that is 
										being build by Jenkins -->
									<destFile>${session.executionRootDirectory}/target/jacoco-it.exec</destFile>
									<fileSets>
										<fileSet
											implementation="org.apache.maven.shared.model.fileset.FileSet">
											<directory>${project.build.directory}</directory>
											<includes>
												<include>**/*.exec</include>
											</includes>
										</fileSet>
									</fileSets>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- SonarQube engine -->
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
						<!-- Do not forget to change version in JenkinsFile as well -->
						<version>3.6.0.1398</version>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<build>
		<finalName>ProductCatalogDemo</finalName>
		<plugins>
		<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.21.0</version>
				<configuration>
					<dockerHost>tcp://192.168.99.101:2376</dockerHost>
					<verbose>true</verbose>
					<extensions>true</extensions>
					<!-- Needed if pushing to docker hub : must store these in local env -->
					<!-- Moved this in settings.xml inside .m2 folder -->
					<!-- <authConfig> <username>username</username> <password>password</password> 
						</authConfig> -->
					<images>
						<image>
							<!-- name of the image -->
							<name>payalbnsl/product-catalog-demo</name>
							<build>
								<!-- docker runs as daemon. CMD shud send all info to docker. Docker 
									looks in this folder and sub-folder to build -->
								<dockerFileDir>${project.basedir}/src/main/resources/</dockerFileDir>
								<!-- copies artifact to docker build dir in target -->
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<tags>
									<tag>latest</tag>
								</tags>

							</build>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<phase>install</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<id>mydeploy</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
